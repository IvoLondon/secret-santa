import Head from "next/head";
import Image from "next/image";
import styles from "../styles/Home.module.css";
import { useState } from "react";
import { Formik, Form, Field, ErrorMessage } from "formik";

export default function Home() {
  const [serverError, setServerError] = useState([""]);
  const [serverMessage, setServerMessage] = useState([""]);
  return (
    <div className={styles.container}>
      <Head>
        <title>Secret Santa</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <h1 className={styles.title}>Secret Santa</h1>
        <Formik
          initialValues={{ email: "" }}
          validate={(values) => {
            const errors: { email?: string } = {};
            if (!values.email) {
              errors.email = "Required";
            } else if (
              !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,}$/i.test(values.email)
            ) {
              errors.email = "Invalid email address";
            }
            return errors;
          }}
          onSubmit={async (values, { setSubmitting }) => {
            // Make a post request to nextjs server
            const postData = await fetch("/api/form", {
              method: "POST",
              body: JSON.stringify(values),
            });
            // parse the result
            const postResponse = await postData.json();

            // set error message
            if (postResponse?.errorMessage) {
              setServerError(postResponse.errorMessage);
            }
            // set data
            if (postResponse?.data) {
              setServerMessage(postResponse.data);
            }
          }}
        >
          {({ isSubmitting }) => (
            <Form>
              <Field type="email" name="email" />
              <ErrorMessage name="email" component="div" />

              <button type="submit" disabled={isSubmitting}>
                Submit
              </button>
            </Form>
          )}
        </Formik>

        {serverError.length ? (
          <>
            {serverError.map((msg) => (
              <p>{msg}</p>
            ))}
          </>
        ) : null}
        {serverMessage.length ? (
          <>
            {serverMessage.map((msg) => (
              <p>{msg}</p>
            ))}
          </>
        ) : null}
      </main>

      <footer className={styles.footer}></footer>
    </div>
  );
}
